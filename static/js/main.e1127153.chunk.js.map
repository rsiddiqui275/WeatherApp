{"version":3,"sources":["action.js","reducer/reducer.js","reducer/index.js","service.js","saga/mySaga.js","store.js","Component/TableComponent.js","main.js","App.js","serviceWorker.js","index.js"],"names":["REQUESTED_API","recieveData","data","type","reducer","state","arguments","length","undefined","_ref","Object","objectSpread","weather","main","combineReducers","fetchData","asyncToGenerator","regenerator_default","a","mark","_callee","payload","res","wrap","_context","prev","next","fetch","concat","sent","json","status","window","alert","abrupt","t0","console","log","stop","_x","apply","this","sagaFunc","rootSaga","action","call","country","put","_marked","_context2","takeLatest","_marked2","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","TableComponent","_this$props","props","react_default","createElement","Table","striped","bordered","hover","size","humidity","temp","description","src","icon","Component","Home","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","initValue","CountryName","_this2","_this$props$results","results","className","formik_esm","initialValues","onSubmit","values","setCountry","render","dirty","htmlFor","name","component","disabled","Component_TableComponent","connect","dispatch","requestApi","App","es","src_main","Boolean","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1127153.chunk.js","sourcesContent":["\r\nexport const REQUESTED_API = \"REQUESTED_API\";\r\nexport const RECIEVE_DATA = \"RECIEVE_DATA\";\r\n\r\n\r\nexport const requestApi = (country) => ({ type: REQUESTED_API, payload: { country } });\r\nexport const recieveData = data => ({ type: RECIEVE_DATA, data });","import { RECIEVE_DATA } from '../action'\r\n\r\n\r\nconst reducer = (state = {}, { type, data }) => {\r\n    switch (type) {\r\n        case RECIEVE_DATA:\r\n            return { ...state, weather: data.weather, main: data.main };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default reducer;","import { combineReducers } from 'redux';\r\nimport { default as data } from './reducer';\r\n\r\nexport default combineReducers({\r\n    data\r\n});","const API_KEY = \"a5716569db0057ccef7a9b74c1f937b4\";\r\n\r\nconst fetchData = async (payload) => {\r\n    const res = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${payload}&appid=${API_KEY}&units=metric`);\r\n    const data = res.json();\r\n    if (res.status === 404) {\r\n        window.alert(\"Please enter valide Country Name\");\r\n    }\r\n    try {\r\n        return data;\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport default fetchData;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport fetchData from '../service';\r\nimport { REQUESTED_API, recieveData } from '../action';\r\n\r\nfunction* sagaFunc(action) {\r\n    try {\r\n        const data = yield call(fetchData, action.payload.country);\r\n\r\n        yield put(recieveData(data));\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport function* rootSaga() {\r\n    yield takeLatest(REQUESTED_API, sagaFunc)\r\n\r\n}\r\n","import { createStore, compose, applyMiddleware } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\n\r\nimport reducer from './reducer';\r\nimport { rootSaga } from './saga/mySaga';\r\n\r\n// create the saga middleware\r\nconst sagaMiddleware = createSagaMiddleware()\r\n// mount it on the Store\r\nconst devToolEnhancer =\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\r\n\r\nconst composeEnhancers = devToolEnhancer || compose;\r\nconst store = createStore(\r\n    reducer,\r\n    composeEnhancers(applyMiddleware(sagaMiddleware))\r\n)\r\n\r\n// then run the saga\r\nsagaMiddleware.run(rootSaga)\r\n\r\nexport default store;","import React, { Component } from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nclass TableComponent extends Component {\r\n\r\n    render() {\r\n        const { main, weather } = this.props\r\n        return (\r\n            <div><Table striped bordered hover size=\"sm\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Humidity</th>\r\n                        <th>Temp</th>\r\n                        <th>Description</th>\r\n                        <th>Icon</th>\r\n\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>{main.humidity}</td>\r\n                        <td>{main.temp}<sup>0</sup>c</td>\r\n                        <td>{weather[0].description}</td>\r\n                        <td><img src={`http://openweathermap.org/img/w/${weather[0].icon}.png`} /></td>\r\n\r\n                    </tr>\r\n\r\n                </tbody>\r\n            </Table>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default TableComponent;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\n\r\nimport { requestApi } from './action';\r\nimport TableComponent from './Component/TableComponent'\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.initValue = {\r\n            CountryName: \"\"\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { weather, main } = this.props.results;\r\n        return (\r\n            <div className='container'>\r\n                <div className='row'>\r\n                    <div className='col-md-12'>\r\n                        <Formik\r\n                            initialValues={this.initValue}\r\n                            onSubmit={(values) => { this.props.setCountry(values.CountryName) }}\r\n                            render={({ dirty }) => (\r\n                                <Form>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"CountryName\">Country Name</label>\r\n                                        <Field name=\"CountryName\" type=\"text\" className={'form-control'} />\r\n                                        <ErrorMessage name=\"CountryName\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <button type=\"submit\" disabled={!dirty} className=\"btn btn-primary mr-2\" >Enter</button>\r\n                                        <button type=\"reset\" disabled={!dirty} className=\"btn btn-secondary\">clear</button>\r\n                                    </div>\r\n                                </Form>\r\n                            )}\r\n                        />\r\n                        {main ? <TableComponent main={main} weather={weather} /> : \"\"}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(state =>\r\n    ({ results: state.data }),\r\n    dispatch => ({\r\n        setCountry: country => dispatch(requestApi(country))\r\n    })\r\n)(Home);","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Main from './main';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <Provider store={store}>\n          <Main />\n        </Provider>\n      </div>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}